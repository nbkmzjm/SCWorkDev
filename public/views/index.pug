extends ../views/layout/layout.pug


	
block title 
	title Home

block header
	include ../views/layout/header.pug

block horMenu
	include ../views/layout/horMenu.pug

block content
	#container
		//- #test
		div(class='collapse row container-fluid' id='taskOptionDiv')
		div(class='row container-fluid' id='taskOptMemoDiv')
			//- ul(class="col-sm-2" role="menu" id='menuTaskOption')

			//- ul(class="col-sm-4" role="menu")
			//- 	li
			//- 		a(href="#") A
			//- 	li
			//- 		a(href="#") B
		#eventAction
		div(id='calendarPick' class = 'navbar-fixed-bottom')
		#mainSC
		#SCNoteDiv
		
		
		//- nav(class="navbar navbar-default")
		//- 	div(class="container-fluid" id="taskOptionDiv")
	


append scripts 
	script(src="public/fnLib/homeFn.js")
	script(src="public/fnLib/feedFn.js")
	script(src="public/fnLib/authFn.js")
	script.

		
		$(function (){
			//- var isChrome = function() {
			//-     return Boolean(window.chrome);
			//- }()
			//- if(isChrome){
			//- 	if(!localStorage.getItem('vapid')){
			//- 		localStorage.setItem('vapid', '')
			//- 	}
			//- 	var JSONdata = !{JSONdata}
			//- 	var vapidPub = JSONdata.vapidPub

			//- 	function urlBase64ToUint8Array(base64String) {
			//- 	  const padding = '='.repeat((4 - base64String.length % 4) % 4);
			//- 	  const base64 = (base64String + padding)
			//- 	    .replace(/\-/g, '+')
			//- 	    .replace(/_/g, '/');
				 
			//- 	  const rawData = window.atob(base64);
			//- 	  const outputArray = new Uint8Array(rawData.length);
				 
			//- 	  for (let i = 0; i < rawData.length; ++i) {
			//- 	    outputArray[i] = rawData.charCodeAt(i);
			//- 	  }
			//- 	  return outputArray;
			//- 	}
				 
			//- 	const vapidPublicKey = vapidPub;
			//- 	const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

			//- 	if ('serviceWorker' in navigator && 'PushManager' in window) {
			//- 	  console.log('Service Worker and Push is supported');

			//- 	  navigator.serviceWorker.register('sw.js').then(function(swReg){
			//- 	    console.log('Service Worker is registered', swReg);

			//- 	    swRegistration = swReg;
			//- 	    unSubcription()
			//- 	    checkSubcription();
			//- 	  }).catch(function(error) {
			//- 	    console.error('Service Worker Error', error);
			//- 	  });
			//- 	} else {
			//- 	  console.warn('Push messaging is not supported');
			//- 	  //- pushButton.textContent = 'Push Not Supported';
			//- 	}
			//- 	function unSubcription(){
			//- 		if(localStorage.getItem('vapid')!=vapidPub){
			//- 			localStorage.setItem('vapid', vapidPub)
			//- 			navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
			//- 				serviceWorkerRegistration.pushManager.getSubscription()
			//- 				.then(function(subscription) {
			//- 				    if (subscription) {
			//- 				      return subscription.unsubscribe();
			//- 				    }
			//- 			  	})
			//- 			})
			//- 		}
			//- 	}

			//- 	function checkSubcription(){
			//- 		swRegistration.pushManager.getSubscription().then(function(subscription){
						
			//- 			if(subscription==null){
			//- 			console.log('no subscription and add subscription now')
			//- 				navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
			//- 					console.log('ppppp')
			//- 					console.log(serviceWorkerRegistration)
			//- 					serviceWorkerRegistration.pushManager.subscribe({ 
			//- 				    	userVisibleOnly: true,
			//- 				   		applicationServerKey:convertedVapidKey
			//- 			    	}).then(function(subscription){
			//- 			    		console.log()
			//- 			    		$.post('/endpoint', {
			//- 				  		endpoint:JSON.stringify(subscription)
			//- 				  		}).done(function(){

			//- 				  		})

			//- 			  		})
			//- 				})
							
			//- 			}else{
			//- 			console.log('yes subscription and continue')
			//- 				$.post('/endpoint', {
			//- 		  			endpoint:JSON.stringify(subscription)
			//- 		  		}).done(function(){

			//- 		  		})

			//- 			}
						
			//- 			console.log('subscription')
			//- 			console.log(JSON.stringify(subscription))

						
			//- 	  	})
			//- 	}

			//- 	(function push_update_activation(msg){
			//- 		if(navigator.serviceWorker.controller){

			//- 	        navigator.serviceWorker.addEventListener('message', function(event){
			//- 	        	if(event.data.command == 'pushActivation'){
			//- 	        		console.log("run push activation");
			//- 	        		$.post('/notif/getNewNotifCount').done(function(Rdata){

			//- 	        			console.log('recieving update contain..')
			//- 	        			$('#badgeNotif').html(Rdata.userFeed)
			//- 	        		})
			//- 	        	} else if(event.data.command == 'updateNotif'){
			//- 	        		console.log('recieving update contain..')
			//- 	        		$('#notifBtn').html(event.data.message)
			//- 	        	} 
			//- 	        })
			//- 		    navigator.serviceWorker.controller.postMessage({'command':'POST'});
			//- 	   	}
			//- 	})()
			//- }

		

				
			  	
			  	
			

			


			 //- if (!("Notification" in window)) {
			 //-    alert("This browser does not support desktop notification");
			 //-  }

			 //-  // Let's check whether notification permissions have already been granted
			 //-  else if (Notification.permission === "granted") {
			 //-    // If it's okay let's create a notification
			 //-    var notification = new Notification("Hi there!");
			 //-  }

			 //-  // Otherwise, we need to ask the user for permission
			 //-  else if (Notification.permission !== 'denied') {
			 //-    Notification.requestPermission(function (permission) {
			 //-      // If the user accepts, let's create a notification
			 //-      if (permission === "granted") {
			 //-        var notification = new Notification("Hi there!");
			 //-      }
			 //-    });
			 //-  }

			
			calendarPick();
			
			$.getJSON('/ajaxUser').done(mainSC, function(){
				$.post('/notif/getNewNotifCount').done(function(Rdata){
					$('#badgeNotif').html(Rdata.userFeed)
				})
				//- setInterval(function(){
				//- 	//- alert('5 second')
				//- 	document.getElementById('SELECT').checked = true
				//- 	activeOptionText('SELECT')
				//- }, 30000)

				document.getElementById('optionTextS').addEventListener('click',function(){
					$.scrollTo(document.getElementById('SELECT'),800, {offset:{top:-200}});
				})
			});
			

			
		});

		

		


		function mainSC(data){
			$.getJSON('/sysObjRead', {
				    tags: "mount rainier",
				    tagmode: "any",
				    format: "json"
			}, 'system').done(function(rData){
				console.log(rData)
				if(!!rData.viewMode){
					var viewMode = rData.viewMode
				}else{
					var viewMode = 'SCHEDULE'
				}
				
				this.data = data
				var mainSCDiv = $('#mainSC');
				mainSCDiv.html('');



				var curDate = $('#calendar').val();
				var weekStart = moment(curDate, 'MM-DD-YYYY').isoWeekday(1);
				var dateHeader = moment(weekStart.format());
				var days = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];
				var lockoutDate =moment(rData.lockoutDate||'4-24-16', 'MM-DD-YYYY')

				//creating schedule overivew for each user when clicking on their
				function scOverview (){
					var userId = this.userId
					var userName = this.innerHTML
					console.log(userName.innerHTML)
					//- console.log(scOverviewWeekStart)	
					

					var divSCOverview = document.createElement('div')
					divSCOverview.id = 'divSCOverview'

					//gradually appear
					divSCOverview.style.opacity= 0;
					var a = 0 
					var myInv = setInterval(function(){
							a = a + 0.1
							divSCOverview.style.opacity= a;
							a>1?clearInterval(myInv):""
						
					}, 200)
					
					divSCOverview.style.top = event.clientY-185+'px'

						var tblOverview = document.createElement('table')
						tblOverview.id = 'tblOverview'
							var thead = document.createElement('thead')
								var tr = document.createElement('tr')
								tr.style.backgroundColor = '#82E9EF'
								for (var i=0; i<7; i++){

									var th = document.createElement('th')
									th.innerHTML = days[i]
									i===0?th.innerHTML = days[i]+'<br>'+userName :""
									tr.appendChild(th)
								}
								thead.appendChild(tr)
							tblOverview.appendChild(thead)

							var tbody = document.createElement(('tbody'))
								var tr = document.createElement('tr')
								var pastDate = -14
								var futureDate = 28
								var arrSCOverviewDate = []
								var arrSCOverviewFirstRange 
								var arrSCOverviewLastRange 
								for (var i=pastDate; i<futureDate; i++){
									if (i % 7 === 0){
										var scOverviewWeekStart = moment(curDate, 'MM-DD-YYYY').isoWeekday(1);
										scOverviewWeekStart.add(i, 'days').format('MMM DD')
										arrSCOverviewDate.push(scOverviewWeekStart)
									}
									if(i===pastDate){
										arrSCOverviewFirstRange = scOverviewWeekStart.format('MM-DD-YYYY')
										
									}else if(i === futureDate-1){
										var scOverviewWeekStart = moment(scOverviewWeekStart)
										
										arrSCOverviewLastRange = scOverviewWeekStart.add(6, 'days').format('MM-DD-YYYY')
									}

								}
								$.getJSON('/scOverview',{
								sDate:arrSCOverviewFirstRange,
								eDate:arrSCOverviewLastRange,
								newYearFix:futureDate-pastDate,
								userId:this.userId
								}).done(function(rData){
									console.log('xxxx: ' + weekStart.format('MM-DD-YYYY'))
									console.log(rData)
									var assign = rData.assign

									var scOverviewCurWeekStart = moment(curDate, 'MM-DD-YYYY').isoWeekday(1);
									arrSCOverviewDate.forEach(function(weekStart, i){
										
										var scOverviewDate = moment(weekStart, 'MM-DD-YYYY');
										for (var i=0; i<7; i++){
											
											
											
											if (i === 0){
												
												var scOverviewDate = moment(weekStart, 'MM-DD-YYYY');
												var td = document.createElement('td')
												
												//- td.innerHTML = scOverviewDate.add(i, 'days').format('MMM DD')+ '<br> -'
													var a = document.createElement('a')

													a.style.color = '#0000BE'
													a.innerHTML = scOverviewDate.add(i, 'days').format('MMM DD')+ '<br> &nbsp'
													
													a.scOverviewDate = scOverviewDate.format('MM-DD-YYYY')
													a.addEventListener('click', function(){
														$('#calendar').val(this.scOverviewDate)
														$.getJSON('/ajaxUser').done(mainSC);
													})
													assign.forEach(function(assign, i){
														console.log(assign.Note)
														
														if(moment(assign.datePos, 'MM-DD-YYYY').isSame(scOverviewDate)){
															noteColor(assign.Note, a)
															a.innerHTML = scOverviewDate.format('MMM DD')+ '<br> <b>'+ assign.Note  + '</b>'
														}
													})
													a.setAttribute('href','#');
													td.appendChild(a)
												var tr = document.createElement('tr')
												tr.style.backgroundColor = '#7ECCD5'
												scOverviewCurWeekStart.isSame(scOverviewDate)?
												tr.style.backgroundColor = '#14B9DE':""
												
												
												tr.appendChild(td)
												
												tbody.appendChild(tr)


											}else{
												var scOverviewDate = moment(weekStart, 'MM-DD-YYYY').isoWeekday(1);
												var td = document.createElement('td')
													var a = document.createElement('a')
													a.style.color = '#0000BE'
													a.innerHTML = scOverviewDate.add(i, 'days').format('MMM DD')+ '<br> &nbsp'
													
												
													a.scOverviewDate = scOverviewDate.format('MM-DD-YYYY')
													a.addEventListener('click', function(){
														$('#calendar').val(this.scOverviewDate)
														$.post('/ajaxUser').done(mainSC);
													})
													assign.forEach(function(assign, i){
														if(moment(assign.datePos, 'MM-DD-YYYY').isSame(scOverviewDate)){
															noteColor(assign.Note, a)
															a.innerHTML = scOverviewDate.format('MMM DD')+ '<br> <b>'+ assign.Note  + '</b>'
															
														}
													})
													a.setAttribute('href','#');
													td.appendChild(a)
												
												tr.appendChild(td)
											}

											
										}
										tbody.appendChild(tr)
									})
								})
								
							tblOverview.appendChild(tbody)
						divSCOverview.appendChild(tblOverview)


					//- divSCOverview.addEventListener('click', function(){
					//- 	var self = this
					var span = document.createElement('span')
					span.innerHTML = '';
					span.zIndex = 1;
					span.style.position = 'absolute'
					span.style.fontSize = "25px"
					span.style.color = 'red'
					span.className = "glyphicon glyphicon-remove"
					span.id = 'delGly';
					//- click the 'x' to remove from list
					span.addEventListener('click', function(){
						divSCOverview.remove()
					
					});
					
					divSCOverview.appendChild(span)
					divSCOverview.addEventListener('mouseleave', function(){
						this.style.zIndex = '0'
					})
					divSCOverview.addEventListener('mousedown', function(event){
						var mousedownPosX = event.pageX
						var mousedownPosY = event.pageY
						this.style.position = 'absolute'
						var self = this
						document.onmousemove = function(event){
							console.log(event.pageX)
							self.style.left = event.pageX-50+'px'
							self.style.top = event.pageY-220+'px'
						}

						this.onmouseup = function() {
							self.style.zIndex = '1'
							document.onmousemove = null
						}

						document.onmouseup = function() {
							document.onmousemove = null
						}
					})
					mainSCDiv.append(divSCOverview)
					$('#divSCOverview').fadeIn(500)

				}


				var table = document.createElement('table');
				table.setAttribute('id', 'main');

				//Create table header
				var thead = document.createElement('thead')
					var tr = document.createElement('tr');
						//- tr.setAttribute('style', 'position:fixed;')
						var th = document.createElement('th');
							var divViewMode = document.createElement('div')
								var btnViewMode = document.createElement('button')
								btnViewMode.className = 'btn btn-primary'
								btnViewMode.id = 'btnViewMode' 
								btnViewMode.innerHTML = viewMode
								btnViewMode.addEventListener('click', function(){
									if(this.innerHTML==='SCHEDULE'){
										$.post('/sysObjUpdate', {
											pData:{
												name:'viewMode', value:'TASK'
											}
										}).done(function(rData){
											if(!!rData.sysObj.viewMode){
												$.getJSON('/ajaxUser').done(mainSC);
											}
										});
									}else if(this.innerHTML==='TASK'){
										$.post('/sysObjUpdate', {
											pData:{
												name:'viewMode', value:'SCHEDULE'
											}
										}).done(function(rData){
											if(!!rData.sysObj.viewMode){
												$.getJSON('/ajaxUser').done(mainSC);
											}
										});
									}
								})
							divViewMode.appendChild(btnViewMode)
						th.appendChild(divViewMode)
							//- td.setAttribute('style', 'position:fixed;top:100px;')
							
					tr.appendChild(th);

					for (var i=0; i<7; i++){
						 
						var th = document.createElement('th');
						//- td.setAttribute('style', 'position:fixed;')
						//- td.appendChild(document.createTextNode(days[dateSC.getDay()]));
						//- td.appendChild(document.createElement('br'))
						th.innerHTML= dateHeader.format('ddd,')+ '<br>' + dateHeader.format('MMM DD')
						dateHeader.isSame(lockoutDate)?
						th.style.backgroundColor= 'red':''
						dateHeader.isSame(moment(lockoutDate).subtract(28, 'days'))?
						th.style.backgroundColor= 'green':''
						//- dateHeader.isSame(moment(lockoutDate).subtract(49, 'days'))?
						//- th.style.backgroundColor= 'yellow':''
						tr.appendChild(th);

						dateHeader.add(1, 'days');
					}
				thead.appendChild(tr)			

				table.appendChild(thead);


				//Create body of the schedule table
				var tbody = document.createElement('tbody')
				table.appendChild(tbody)
				

				//- Create DateSC array with userID and dateSC
				var users = data.pData.users;
				var arrDateSC = moment(weekStart.format());
				var arrListDateSC = [];
				for (var i=0; i< users.length; i++){
				
					    for (var x=0; x<7; x++){
							var taskSCData = {};
							
							//- if (x==0){
								//- taskSCData.userId = users[i].id;
								//- taskSCData.dateSC = users[i].name;
								//- taskSCData.title = users[i].title
							//- }else{

								taskSCData.user = users[i];
								
								taskSCData.dateSC = arrDateSC.format('MM-DD-YYYY');
								//- taskSCData.userId = users[i].id;
								//- taskSCData.name = users[i].name;
								//- taskSCData.title = users[i].title
								arrDateSC.add(1, 'days')
							//- }
							arrListDateSC.push(taskSCData);
						}
						
					arrDateSC.subtract(7, 'days');
				}
			
			
				
				
				//- alert(JSON.stringify(arrListDateSC, null, 4))
				var today = moment()
				
				//- var date21LK = moment(lockoutDate).subtract(21, 'days')
				var date28LK = moment(lockoutDate).subtract(28, 'days')
				
				if (today > date28LK){

					lockoutDate.add(28, 'days')

					$.post('/sysObjUpdate', {
						pData:{
							name:'lockoutDate', value:lockoutDate.format('MM-DD-YYYY')
						}
					}).done(function(rData){
						
						//- output lock out Note
						
					});

				}
				
							
				$.getJSON('/taskSC',{
					sDate:weekStart.format('MM-DD-YYYY')
					}).done(function(rData){
					//- alert(JSON.stringify(arrListDateSC, null, 4))

					var assign = rData.assign
					console.log(assign)
					var curUser = rData.curUser
					var curUserTitle = curUser.title
					var curUserId = curUser.id

					var userDelta = 0
					var titleDelta = ''
					var SCNote = document.createElement('p')
					SCNote.id = 'SCNote'
					
					
					arrListDateSC.forEach(function(item,i){
						//- alert(JSON.stringify(item.user, null, 4))
						var userId = item.user.id
						var userRole = item.user.role
						var userTitle = item.user.title
						var dateSC = item.dateSC
						var fullName = item.user.fullName
						var departmentId = item.user.departmentId

						var foundSC = function(assign, item){
							for (x = 0; x< assign.length; x++ ){
								//- console.log(moment(assign[x].datePos,'MM-DD-YYYY'))
								if (moment(assign[x].datePos,'MM-DD-YYYY').isSame(moment(item.dateSC,'MM-DD-YYYY')) && assign[x].userId==userId){
								return true
								}
							}
							return false
						}(assign, item)
						if (foundSC){
							console.log(JSON.stringify(assign[x], null, 4))
							var viewMode = document.getElementById('btnViewMode').innerHTML
							var assignNote = ''
							if(viewMode=== 'SCHEDULE'){
								assign[x].assignTracers.forEach(function(assignTracer){
									if(assignTracer.type === "SCHEDULE"){

										assignNote = assignTracer.Note

										console.log(assignTracer.Note)
									}
								})
							}else{
								assign[x].assignTracers.forEach(function(assignTracer){
									if(assignTracer.type === "TASK"){

										assignNote = assignTracer.Note
										console.log(assignTracer.Note)
									}
								})
							}
							var datePos = moment(assign[x].datePos,'MM-DD-YYYY')
							var memo = assign[x].Memo
							var tracer = '';
							var firstTracer = '';
							var tracerTask = ''
							var firstTracerTask = ''
							var tracerSchedule = ''
							var firstTracerSchedule = ''

							var td = document.createElement('td');
							td.setAttribute('class','cell')
								var a = document.createElement('a')
								noteColor(assignNote, a)
								
								a.innerHTML= assignNote	
									//Disabled bagdes within 28 lockout days
									//- if (!datePos.isBetween(date28LK,lockoutDate)){
										//Create unread badges
										var span = document.createElement('span')
										span.style.color = '#FF8C5A'
										
										span.style.float = 'right'
										
										var assignTracers = assign[x].assignTracers

										var unreadTaskCount = 0;
										var unreadScheduleCount = 0;
										assignTracers.forEach(function(assignTracer, i){
											
											var createdAt = moment(assignTracer.createdAt)
											
											
												
												if(assignTracer.type=='TASK'){
													if(assignTracer.Read == 'false' ){
														if (i == 0){
															firstTracerTask = assignTracers[i].user.name+': '+createdAt.format('MMM D @HH:m:s') +' | <b>'+assignTracer.Note +(assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )
														}else{
															tracerTask += assignTracers[i].user.name+': '+createdAt.format('MMM D @HH:m:s') +' | <b>'+assignTracer.Note + (assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )+ "</b><br>"
														}
														unreadTaskCount++
													}
													
												}else if ('SCHEDULE'){
													if(assignTracer.Read == 'false' ){
														unreadScheduleCount++
													}
														if (i == 0){
															firstTracerSchedule = assignTracers[i].user.name+': '+createdAt.format('MMM D @HH:m:s') +' | <b>'+assignTracer.Note +(assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )
															
														}

														
													
												}
											
										})
										
										if(viewMode=== 'TASK'){
											if (unreadTaskCount!=0){
												span.className = "badge"
												span.innerHTML = unreadTaskCount
												firstTracer = firstTracerTask
												tracer = tracerTask
											}
										}else if (viewMode === 'SCHEDULE'){
											if (unreadScheduleCount!=0){
												span.className = "glyphicon glyphicon-edit"
											}
												firstTracer = firstTracerSchedule
										}
										
										a.appendChild(span)
									//- }

								
								a.setAttribute('href','#');
								a.setAttribute('data-toggle','popover');
								a.setAttribute('data-trigger','hover');
								a.setAttribute('data-placement','auto');
								a.style.fontWeight = 'bold'
								a.setAttribute('title', firstTracer);
								document.addEventListener('mousemove', function(){
									var taskSC = $('input[name=PTO]:checked').attr('value');
									if (taskSC=="SELECT"){

										a.setAttribute('data-content', tracer);
										
										$('[data-toggle="popover"]').popover({html:true})
									//- }else if (taskSC=='SELECT'){
									//- 	a.setAttribute('data-content', 'Memo:<br>' + memo);
									//- 	$('[data-toggle="popover"]').popover({html:true})
									}else{
										$('[data-toggle="popover"]').popover('destroy')
									}
								})
								td.appendChild(a)
								
								td.addEventListener('click', function(assign, userId){
									return function(){
										$('#eventAction').stop()
										$('#eventAction').fadeIn()
										$('#SCNote').stop()
										$('#SCNote').fadeIn()
										var Note = assign.Note
										var dateSC = assign.datePos
										var selDate = moment(dateSC,'MM-DD-YYYY')
										var memo = $('#memo').val()
										var taskSC = $('input[name=PTO]:checked').attr('value');
										

										
										//- &&(curUserId==assign.userId || arrayTitle_UserTab.indexOf(curUserTitle) != -1)
										if (taskSC=='SELECT'){
											
											if(false){
												
												$('#eventAction').html('')
												var table = document.createElement('table');
												table.setAttribute('id', 'eventActionTable');
												table.draggable = true
												table.addEventListener('click',function(){
													$('#eventAction').stop()
												})

												$('#eventAction').on('mouseleave', function(){
													$('#delGly').remove()
												})


												var tr = document.createElement('tr')
												var arrayField = [ 'Event Detail','Event Date', 'Acknowledged']

												arrayField.forEach(function(field){
													
													var td = document.createElement('td')
													td.appendChild(document.createTextNode(field))
													tr.appendChild(td)
												})
												table.appendChild(tr)
												$.post('/assignTracerReadWeek',{
													sDate:weekStart.format('MM-DD-YYYY')
												}).done(function(Rdata){
													assigns = Rdata.assigns
													assigns.forEach(function(assign, i){
														var datePos = assign.datePos
														assignTracers = assign.assignTracers
														assignTracers.forEach(function(assignTracer, i){
															var createdAt = moment(assignTracer.createdAt)
															var tracer = assignTracers[i].user.name+': '+createdAt.format('MMM D @HH:m:s') +' | <b>'+assignTracer.Note + (assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )+ "</b>"
															

															window['tr' + i] = document.createElement('tr')
															if(i==0){
																window['tr' + i].style.backgroundColor = '#C4FFCE'
																window['tr' + i].style.borderTop = '5px solid #7B7B7B'
															}
															if(i==1){
																window['tr' + i].style.backgroundColor = '#FEB6B6'
															}
																var td = document.createElement('td')
																td.innerHTML = tracer
																window['tr' + i].appendChild(td)
																var td2 = document.createElement('td')
																if(i==0 && dateSC == datePos){
																	
																	td2.innerHTML = datePos
																	td2.style.backgroundColor = 'yellow'
																}else if(i==0){
																	td2.innerHTML = datePos
																}else{
																	td2.innerHTML = ''
																}
																td2.style.fontWeight = 'bold'
																
																window['tr' + i].appendChild(td2)
																var td1 = document.createElement('td')
																	var input = document.createElement('input')
																	if (assignTracer.Read == '0'){
																		input.type = 'checkbox'
																		input.id = 'read'
																		input.name = 'read'
																		input.checked = false
																		
																		input.addEventListener('click',function(){
																			$.post('/assignTracerReadUpd',{			assignTracerId:assignTracer.id,
																				curUserName:curUser.name

																			}).done(function(Rdata){
																				if(Rdata.updated==1){
																				input.checked = true
																				input.disabled = true
																				}
																			})
																			
																		})
																	}else{
																		var input = document.createElement('span')
																		input.id = 'read'
																		input.innerHTML = assignTracer.Read
																	}
																td1.appendChild(input)
																window['tr' + i].appendChild(td1)
															
															table.appendChild(window['tr' + i])
														})
													})
												})


											}else{
												if(roleList('B').indexOf(curUser.role) != -1||assign.userId==curUserId){
													$('#eventAction').html('')
													
													var viewMode = document.getElementById('btnViewMode').innerHTML
													console.log(viewMode)
													if(viewMode === 'TASK'){
														$.getJSON('/assignTracerReadDay',{
															type:'TASK',
															assignId:assign.id
														}).done(function(Rdata){
															if(!!Rdata.assign){
																assignTracers = Rdata.assign.assignTracers
																var table = document.createElement('table');
																table.setAttribute('id', 'taskTable');
																table.draggable = true
																table.ondragstart = function(ev){
																	ev.dataTransfer.setData("tableId", ev.target.id);
																}


																$('#taskTable').on('mouseleave', function(){
																	$('#delGly').remove()
																})


																var tr = document.createElement('tr')
																	var arrayField = ["TASKS for "+ assign.datePos, 'Pending TASKS']

																	arrayField.forEach(function(field){
																		
																		var td = document.createElement('td')
																		td.appendChild(document.createTextNode(field))
																		tr.appendChild(td)
																	})
																	table.appendChild(tr)
																assignTracers.forEach(function(assignTracer, i){
																	
																	var createdAt = moment(assignTracer.createdAt)
																	var tracer = assignTracers[i].user.name+': '+createdAt.format('MMM D @HH:m:s') +' | <b>'+assignTracer.Note + (assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Task</u>: "  + assignTracer.Memo:"</b>" )+ "</b>"
																	

																	window['tr' + i] = document.createElement('tr')
																		var td = document.createElement('td')
																		td.innerHTML = tracer
																		if(assignTracer.Read!=='DELETED'){
																			td.addEventListener('click', function(){
																				
																				var table = document.createElement('table');
																				table.setAttribute('id', 'taskDetailTable');
																				
																				table.draggable = true
																				table.ondragstart = function(ev){
																					ev.dataTransfer.setData("tableId", ev.target.id);
																				}
																					var trHead = document.createElement('tr')
																						//- var tdHead = document.createElement('td')
																						trHead.innerHTML = assignTracer.Memo
																						trHead.addEventListener('click',function(){
																							$('#taskTable').show()
																							$('#taskDetailTable').remove()
																							
																						})
																						//- trHead.appendChild(tdHead)
																					table.appendChild(trHead)
																					var trTitle = document.createElement("tr")
																						var headerArr = ['Task','Comments', 'Value','Completed By', 'Updated At']
																						headerArr.forEach(function(header, i){
																							var td = document.createElement('td')
																							td.innerHTML = header
																							trTitle.appendChild(td)
																						})
																					table.appendChild(trTitle)

																					assignTracer.assignTracerDetails.forEach(function(assignTracerDetail, j){
																						var trContent = document.createElement('tr')
																							console.log(assignTracerDetail)
																							var contentArr = [assignTracerDetail.Description,assignTracerDetail.Comments, assignTracerDetail.Value,assignTracerDetail.CompletedBy, assignTracerDetail.updatedAt]
																							contentArr.forEach(function(content, i){
																								var tdContent = document.createElement('td')
																								if (content=="" && i==1){
																									var input = document.createElement('input')
																									input.id = 'taskComment'+ j
																									input.type = 'text'
																									tdContent.appendChild(input)
																								}else if (content=="" && i==2){
																									var input = document.createElement('input')
																									input.id = 'taskValue' + j
																									input.type = 'text'
																									tdContent.appendChild(input)
																								}else if (content==0 && i==3){
																									var input = document.createElement('input')
																									input.type = 'checkbox'
																									input.addEventListener('click', function(){
																										console.log(curUser.name)
																										$.post('/assignTracerDetailUpd',{
																											comments:$("#taskComment"+j).val(),
																											value:$("#taskValue"+j).val(),
																											assignTracerDetailId:assignTracerDetail.id,
																											curUserName:curUser.name
																										}).done(function(Rdata){
																											if(Rdata.updated==1){
																												input.checked = true
																												input.disabled = true
																											}
																										})

																									})
																									tdContent.appendChild(input)

																								}else {
																									tdContent.innerHTML = content
																								}
																								trContent.appendChild(tdContent)
																							})
																						table.appendChild(trContent)
																					})


																					
																				table.addEventListener('click',function(){
																					$('#eventAction').stop()
																				})
																				

																				$('#eventAction').on('mouseleave', function(){
																					$('#delGly').remove()
																				})
																				$('#eventAction').append(table)
																			})
																		}
																		window['tr' + i].appendChild(td)
																		var td1 = document.createElement('td')
																			var input = document.createElement('input')
																			if (assignTracer.Read == 'false'){
																				input.type = 'checkbox'
																				input.id = 'readTask'
																				input.name = 'read'
																				input.checked = false
																				
																				input.addEventListener('click',function(){
																					$.post('/assignTracerReadUpd',{			assignTracerId:assignTracer.id,
																						curUserName:curUser.name

																					}).done(function(Rdata){
																						if(Rdata.updated==1){
																						input.checked = true
																						input.disabled = true
																						}
																					})
																					
																				})
																			}else{
																				var input = document.createElement('span')
																				input.id = 'readTask'
																				input.innerHTML = assignTracer.Read
																			}
																		td1.appendChild(input)
																		window['tr' + i].appendChild(td1)

																		var span = document.createElement('span')
																			span.innerHTML = '';
																			span.style.color = 'red'
																			span.className = "glyphicon glyphicon-remove-circle"
																			span.id = 'delGly';
																			span.addEventListener('click', function(){
																				$.post('/assignTracerDel',{
																						assignTracerId:assignTracer.id

																					}).done(function(Rdata){
																						if(Rdata.updated==1){
																						td1.innerHTML = "Deleted"
																						}
																					})
																			})
																		window['tr' + i].appendChild(span)
																		
																		
																	
																	table.appendChild(window['tr' + i])

																})
															}

																
															
															$('#eventAction').append(table
															//- , $('#eventAction').fadeOut(4000, function(){})
															)
														})
													}else if(viewMode === 'SCHEDULE'){


														$.getJSON('/assignTracerReadDay',{
															type:'SCHEDULE',
															assignId:assign.id
														}).done(function(Rdata){
															if(!!Rdata.assign){
																assignTracers = Rdata.assign.assignTracers
																console.log(JSON.stringify(assignTracers, null, 4))
																var table = document.createElement('table');
																table.setAttribute('id', 'eventTable');
																table.draggable = true
																table.ondragstart = function(ev){
																	
																	ev.dataTransfer.setData("tableId", ev.target.id);
																}
																table.addEventListener('click',function(){
																	$('#eventAction').stop()
																})

																$('#eventAction').on('mouseleave', function(){
																	$('#delGly').remove()
																})

																var tr = document.createElement('tr')
																var arrayField = [" SCHEDULE for "+ assign.datePos, 'Acknowledged']

																arrayField.forEach(function(field){
																	
																	var td = document.createElement('td')
																	td.appendChild(document.createTextNode(field))
																	tr.appendChild(td)
																})
																table.appendChild(tr)
																
																assignTracers.forEach(function(assignTracer, i){


																	var createdAt = moment(assignTracer.createdAt)
																	var tracer = assignTracers[i].user.name+': '+createdAt.format('MMM D @HH:m:s') +' | <b>'+assignTracer.Note + (assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )+ "</b>"
																	

																	window['tr' + i] = document.createElement('tr')
																		var td = document.createElement('td')
																		td.innerHTML = tracer
																		
																		window['tr' + i].appendChild(td)
																		var td1 = document.createElement('td')
																			var input = document.createElement('input')
																			if (assignTracer.Read == 'false'){
																				input.type = 'checkbox'
																				input.id = 'readEvent'
																				input.name = 'read'
																				input.checked = false
																				
																				input.addEventListener('click',function(){
																					$.post('/assignTracerReadUpd',{			assignTracerId:assignTracer.id,
																						curUserName:curUser.name

																					}).done(function(Rdata){
																						if(Rdata.updated==1){
																						input.checked = true
																						input.disabled = true
																						}
																					})
																					
																				})
																			}else{
																				var input = document.createElement('span')
																				input.id = 'readEvent'
																				input.innerHTML = assignTracer.Read
																			}
																		td1.appendChild(input)
																		window['tr' + i].appendChild(td1)

																		var span = document.createElement('span')
																		span.innerHTML = '';
																		span.style.color = 'red'
																		span.className = "glyphicon glyphicon-remove-circle"
																		span.id = 'delGly';
																		span.addEventListener('click', function(){
																			$.post('/assignTracerDel',{
																					assignTracerId:assignTracer.id

																				}).done(function(Rdata){
																					if(Rdata.updated==1){
																					td1.innerHTML = "Deleted"
																					}
																				})
																		})
																		window['tr' + i].appendChild(span)

																	
																	table.appendChild(window['tr' + i])
																})
																$('#eventAction').append(table
																//- , $('#eventAction').fadeOut(4000, function(){
																	
																//- })
																)
															}
														})
													}

												}
											}
											
											
											
											document.ondragover = function(ev){
												ev.preventDefault()
												
												
											}

											document.ondrop = function(ev){
												event.preventDefault();
												var data = ev.dataTransfer.getData("tableId");
												$('#'+data).length>0 ? 
												$('#'+data).remove():'';
											}
										}else if (taskSC=="NEW"){ 

										}else if(curUserId!=userId&&
										roleList('B').indexOf(curUser.role) == -1&&
										["SWIT-R","SWIT-A","SWIT-X"].indexOf(taskSC) == -1){
											SCNote.innerHTML= 'You are not authorized for this action'
											
											$('#SCNoteDiv').html('')
											$('#SCNoteDiv').html(SCNote)
											$('#SCNote').fadeIn(1000, function(){
													setTimeout(function(){
													$('#SCNote').fadeOut()
												}, 3000)
											})
										}else if ((taskSC=="PTO-R" || taskSC=="DELETE") && 
										selDate.isBefore(lockoutDate) && 
										roleList('B').indexOf(curUser.role) == -1){
											
											SCNote.innerHTML = 'PTO input will not be available for dates before '+ lockoutDate.format('MM-DD-YYYY')
											$('#SCNoteDiv').html('')
											$('#SCNoteDiv').html(SCNote)
											$('#SCNote').fadeIn(1000, function(){
												setTimeout(function(){
												$('#SCNote').fadeOut()
												}, 3000)
											})
										}else if (taskSC=="AVBL" && 
										selDate.isBefore(today) && 
										roleList('B').indexOf(curUser.role) == -1){
										
										SCNote.innerHTML = 'Changes is not allowed for dates before '+ today.format('MM-DD-YYYY')
										$('#SCNoteDiv').html('')
										$('#SCNoteDiv').html(SCNote)
										$('#SCNote').fadeIn(1000, function(){
												setTimeout(function(){
												$('#SCNote').fadeOut()
											}, 3000)
										})

										}else if (taskSC=="DELETE"){
											$.post('/dateSCDel', {
												postdata:{
													userId: userId, 
													dateSC:dateSC
												}
											}).done(function(pData){
												if(pData.updated>0){
													
													td.style.backgroundColor = 'red'
												} 
											});
										
										}else{
											$.post('/getManagement', {
											departmentId:departmentId

											}).done(function(rData){
												console.log('manager:')
												console.log(rData)
												var managementIds = rData.users.map(function(user){
													return user.id
												})
												var userArray = []
												if (taskSC==='PTO-R'||taskSC==='PTO-X' ){
												var postTo = 'Private'
												var postToValue = 'Private'
												var filter = 'Include'
												//send PTO-R to management
												userArray = managementIds
												//add userId to include array if PTO-R for somebody else
												userId!==curUserId?userArray.push(userId):""
												postText =(taskSC=='PTO-R')?' requested PTO':"'s PTO was denied"
												postText = fullName + postText +' for ' + dateSC
												}else if (taskSC==='PTO-A'){
													alert('PTOA')
													var postTo = 'Coworker'
													var postToValue = 'ALL'
													var postText = 'PTO is  approved for '+ fullName +' on ' + dateSC
												}else if(taskSC==='SWIT-R' ){

													if(userId == curUserId){
														var postTo = 'Coworker'
														var postToValue = 'ALL'
														postText = fullName + ' is looking for coverage on ' + dateSC
													}else{
														var postTo = 'Private'
														var postToValue = 'Private'
														var filter = 'Include'
														userArray = managementIds
														userArray.push(userId)
														postText = curUser.name + ' want to work for ' + fullName + ' on ' + dateSC + ' in exchange for pending SWIT-R day'
													}

												}else if(taskSC==='SWIT-A' ){
													var postTo = 'Private'
													var postToValue = 'Private'
													var filter = 'Include'
													userArray = managementIds
													userArray.push(userId)
													if(userId == curUserId){
														var postText = curUser.name + ' agree to take off work ' + dateSC + 'in exchange for another day'
													}else{
														var postText = curUser.name + ' agree to work for ' + fullName + ' on ' + dateSC
													}
												}else if(taskSC==='SWIT-X' ){
													var postTo = 'Private'
													var postToValue = 'Private'
													var filter = 'Include'
													userArray = managementIds
													userArray.push(userId)
													if(userId == curUserId){
														var postText = curUser.name + ' deny switch request on' + dateSC 
													}else{
														var postText = curUser.name + ' deny to work for ' + fullName + ' on ' + dateSC
													}


												}else{
													var postTo = 'Private'
													var postToValue = 'Private'
													var postText = 'Assigned ' + taskSC + ' for '+ fullName +' on ' + dateSC
													var filter = 'Include'
													userArray.push(userId)
												}


												var memoCheckOpts = document.getElementsByClassName('checkedMemo')||false
												console.log(memoCheckOpts)
												//- console.log(memoCheckOpts[1].parentNode.childNodes[2])
												if (memoCheckOpts.length!=0){
													for(var i = 0; i<memoCheckOpts.length;i++){
														var detailListArr = []
														var detailList = memoCheckOpts[i].parentNode.childNodes[2].getElementsByTagName('li')
														postDB({
															postTo:postTo,
															postToValue: postToValue,
															postText:postText,
															filter:filter,
															userArray:userArray
														})
														if (detailList.length!=0){
															for(var u = 0; u<detailList.length;u++){
																detailListArr.push(detailList[u].innerHTML)
															}
															
															dateSCSubmit(memoCheckOpts[i].value, memoCheckOpts[i].name,userId, dateSC, taskSC, td,detailListArr)

														}else{
															dateSCSubmit(memoCheckOpts[i].value, memoCheckOpts[i].name,userId, dateSC, taskSC, td,null)
														}
														
													}
												}

											})
										}
									}
								}(assign[x], userId))
						}else{
							var td = document.createElement('td');
								td.setAttribute('class','cell')
								td.appendChild(document.createTextNode(""));

							td.addEventListener('click',function(userId,dateSC, fullName){
								
								return function(){
									var memo = $('#memo').val()
									$('#SCNote').stop()
									$('#SCNote').fadeIn()


									var selDate = moment(dateSC,'MM-DD-YYYY')
									var taskSC = $('input[name=PTO]:checked').attr('value');

									
									//- Prevent user to request after lockoutDate
									if(taskSC == 'SELECT'){
																		
									}else if(taskSC == 'DELETE'){

									}else if(taskSC == 'NEW'){

									}else if(curUserId!=userId&&
									roleList('B').indexOf(curUser.role) == -1&&
									["SWIT-R","SWIT-A","SWIT-X"].indexOf(taskSC) == -1){
										SCNote.innerHTML= 'You are not authorized for this action'
										$('#SCNoteDiv').html('')
										$('#SCNoteDiv').html(SCNote)
										$('#SCNote').fadeIn(1000, function(){
											setTimeout(function(){
												$('#SCNote').fadeOut()
											}, 3000)
										})
									}else if (taskSC=="PTO-R" && 
									selDate.isBefore(lockoutDate) && 
									roleList('B').indexOf(curUser.role) == -1){
										SCNote.innerHTML = 'PTO input will not be available for dates before '+ lockoutDate.format('MM-DD-YYYY')
										$('#SCNoteDiv').html('')
										$('#SCNoteDiv').html(SCNote)
										$('#SCNote').fadeIn(1000, function(){
												setTimeout(function(){
												$('#SCNote').fadeOut()
											}, 3000)
										})
									}else if (taskSC=="AVBL" && 
									selDate.isBefore(today) && 
									roleList('B').indexOf(curUser.role) == -1){
										
										SCNote.innerHTML = 'Changes is not allowed for dates before '+ today.format('MM-DD-YYYY')
										$('#SCNoteDiv').html('')
										$('#SCNoteDiv').html(SCNote)
										$('#SCNote').fadeIn(1000, function(){
												setTimeout(function(){
												$('#SCNote').fadeOut()
											}, 3000)
										})
									
									}else{
										$.post('/getManagement', {
											departmentId:departmentId

										}).done(function(rData){
											console.log('manager:')
												console.log(rData)
											var managementIds = rData.users.map(function(user){
												return user.id
											})
											var userArray = []
											if (taskSC==='PTO-R'||taskSC==='PTO-X' ){
											var postTo = 'Private'
											var postToValue = 'Private'
											var filter = 'Include'
											//send PTO-R to management
											userArray = managementIds
											//add userId to include array if PTO-R for somebody else
											userId!==curUserId?userArray.push(userId):""
											postText =(taskSC=='PTO-R')?' requested PTO':"'s PTO was denied"
											postText = fullName + postText +' for ' + dateSC
											}else if (taskSC==='PTO-A'){
												//- alert('PTOA')
												var postTo = 'Coworker'
												var postToValue = 'ALL'
												var postText = 'PTO is  approved for '+ fullName +' on ' + dateSC
											}else if(taskSC==='SWIT-R' ){

												if(userId == curUserId){
													var postTo = 'Coworker'
													var postToValue = 'ALL'
													postText = fullName + ' is looking for coverage on ' + dateSC
												}else{
													var postTo = 'Private'
													var postToValue = 'Private'
													var filter = 'Include'
													userArray = managementIds
													userArray.push(userId)
													postText = curUser.name + ' want to work for ' + fullName + ' on ' + dateSC + ' in exchange for pending SWIT-R day'
												}

											}else if(taskSC==='SWIT-A' ){
												var postTo = 'Private'
												var postToValue = 'Private'
												var filter = 'Include'
												userArray = managementIds
												userArray.push(userId)
												if(userId == curUserId){
													var postText = curUser.name + ' agree to take off work ' + dateSC + 'in exchange for another day'
												}else{
													var postText = curUser.name + ' agree to work for ' + fullName + ' on ' + dateSC
												}
											}else if(taskSC==='SWIT-X' ){
												var postTo = 'Private'
												var postToValue = 'Private'
												var filter = 'Include'
												userArray = managementIds
												userArray.push(userId)
												if(userId == curUserId){
													var postText = curUser.name + ' deny switch request on' + dateSC 
												}else{
													var postText = curUser.name + ' deny to work for ' + fullName + ' on ' + dateSC
												}


											}else{
											var postTo = 'Private'
											var postToValue = 'Private'
											var postText = 'Assigned ' + taskSC + ' for '+ fullName +' on ' + dateSC
											var filter = 'Include'

											userArray.push(userId)
											}
											if( ["PTO-A","PTO-X","SWIT-A","SWIT-X"].indexOf(taskSC) == -1){
												var memoCheckOpts = document.getElementsByClassName('checkedMemo')||false
												if (memoCheckOpts.length!=0){
													var detailListArr0 = []
													var detailList = memoCheckOpts[0].parentNode.childNodes[2].getElementsByTagName('li')
													console.log(memoCheckOpts[0].name)
													//- if(detailList.length!=0){
														console.log('in loop:'+memoCheckOpts[0].name)
														for(var u = 0; u<detailList.length;u++){
															detailListArr0.push(detailList[u].innerHTML)

														}
														console.log(detailListArr0)
														$.post('/dateSC', {postdata:{userId: userId, dateSC:dateSC, taskSC:taskSC, memo:memoCheckOpts[0].value, type:memoCheckOpts[0].name, detailListArr:detailListArr0}}).done(function(pData){
															//- testalert('hello')
															
															if(!!pData.Note){
																td.innerHTML=pData.Note;
																td.style.backgroundColor = 'yellow'
																//add feed and notification for this scheduling events
																console.log(postText)
																	postDB({
																		postTo:postTo,
																		postToValue: postToValue,
																		postText:postText,
																		filter:filter,
																		userArray:userArray
																		 
																	})
																for(var i = 1; i<memoCheckOpts.length;i++){
																	var detailListArr = []
																	var detailList = memoCheckOpts[i].parentNode.childNodes[2].getElementsByTagName('li')
																	//- if (detailList.length!=0 ){
																		for(var u = 0; u<detailList.length;u++){
																			detailListArr.push(detailList[u].innerHTML)
																		}
																		
																		dateSCSubmit(memoCheckOpts[i].value,memoCheckOpts[i].name, userId, dateSC, taskSC, td,detailListArr)

																	//- }else{
																	//- 	dateSCSubmit(memoCheckOpts[i].value, memoCheckOpts[i].name, userId, dateSC, taskSC, td,null)
																	//- }
																}
															} 

														});
													//- }
													//- else{

													//- 	$.post('/dateSC', {postdata:{userId: userId, dateSC:dateSC, taskSC:taskSC, memo:memoCheckOpts[0].value, type:memoCheckOpts[0].name, detailListArr:null}}).done(function(pData){
													//- 		if(!!pData.Note){
													//- 			td.innerHTML=pData.Note;
													//- 			td.style.backgroundColor = 'yellow'
													//- 			for(var i = 1; i<memoCheckOpts.length;i++){
													//- 				var detailListArr = []
													//- 				var detailList = memoCheckOpts[i].parentNode.childNodes[2].getElementsByTagName('li')
													//- 				if (detailList.length!=0){
													//- 					for(var u = 0; u<detailList.length;u++){
													//- 						detailListArr.push(detailList[u].innerHTML)
													//- 					}
																		
													//- 					dateSCSubmit(memoCheckOpts[i].value, memoCheckOpts[i].name, userId, dateSC, taskSC, td,detailListArr)

													//- 				}else{
													//- 					dateSCSubmit(memoCheckOpts[i].value, memoCheckOpts[i].name, userId, dateSC, taskSC, td,null)
													//- 				}
													//- 			}
													//- 		}
													//- 	})


													//- }
												//- }
												
												//- var i = 0;
												//- function loopArrMemoOpt (arr){

												//- 	//- console.log(memoCheckOpts[i].value)
												//- 	dateSCSubmit(memoCheckOpts[i].value, userId, dateSC, taskSC, td)

												//- 	i++
												//- 	if (i < arr.length){
												//- 		loopArrMemoOpt(arr);
												//- 	}

												//- }
												//- loopArrMemoOpt(memoCheckOpts)
												}
											}else{
												SCNote.innerHTML= 'Please make a request first'
												$('#SCNoteDiv').html('')
												$('#SCNoteDiv').html(SCNote)
												$('#SCNote').fadeIn(1000, function(){
													setTimeout(function(){
														$('#SCNote').fadeOut()
														$('#SCNoteDiv').html('')
													}, 3000)
												})
											}
										})

									}

								}
							}(userId, dateSC, fullName));
						}
						//- Reset schedule date position for new user
						//- console.log(userId+'-'+userTitle+'-'+dateSC)
						

						//- add new row for next user if user ID changed detected
						
						if(userId != userDelta && userTitle != titleDelta ){
							var tdUser = document.createElement('td');
							tdUser.setAttribute('class','cell')
							tdUser.appendChild(document.createTextNode(item.user.fullName));
							tdUser.userId = userId
							tdUser.addEventListener('click', scOverview)
							//- alert(arr[i].dateSC)
							window['tr' + userId] = document.createElement('tr');
							window['tr' + userId].style.borderTop = '3px groove #ABF7FE'
							window['tr' + userId].appendChild(tdUser);
							window['tr' + userId].appendChild(td);
							//- table.appendChild(window['tr' + userId]);
						}else if(userId != userDelta && userTitle == titleDelta){
							var tdUser = document.createElement('td');
							tdUser.setAttribute('class','cell')
							tdUser.appendChild(document.createTextNode(item.user.fullName));
							tdUser.userId = userId
							tdUser.addEventListener('click', scOverview)
							//- alert(arr[i].dateSC)
							window['tr' + userId] = document.createElement('tr');
							window['tr' + userId].id = 'user'+userId
							window['tr' + userId].appendChild(tdUser);
							window['tr' + userId].appendChild(td);
							
						}else{
							window['tr' + userId].appendChild(td);
							window['tr' + userId].id = 'user'+userId
							tbody.appendChild(window['tr' + userId]);

						}	
						userDelta = userId;
						titleDelta = userTitle;
					})
				//- alert(curUserId)
				$.scrollTo(document.getElementById('user'+curUserId),800, {offset:{top:-100}});
				})	

				//- output lock out Note 
				table.appendChild(tbody)
				mainSCDiv.append(table);	
				
			});
		}	

		
		function taskOptionGen(name, category, arrayList){
			var taskOption = {}
			taskOption.name = name
			taskOption.category = category
			arrayList.push(taskOption)
			return arrayList
		} 

		//- function inputMemo(ul, lix){
		//- 	var li = document.createElement('li')
			
		//- 	li.style.textDecoration= 'underline'
		//- 	li.style.width = '200px'
		//- 	li.style.listStyle = 'none'
		//- 	//- li.setAttribute('style','z-index:-1;')

		//- 		var inputMemo = document.createElement('input');
		//- 		//- inputMemo.className = "col-sm-12"
		//- 		inputMemo.setAttribute('style','z-index:-1')
		//- 		inputMemo.style.backgroundColor = 'black'
		//- 		inputMemo.style.color = 'white'
		//- 		inputMemo.setAttribute('placeholder','Add Memo');
		//- 		inputMemo.setAttribute('type','text');
		//- 		inputMemo.setAttribute('id','memo');
		//- 	li.appendChild(inputMemo)
		//- 	ul.insertBefore(li,lix)

		//- }


		var arrayOption = []
		taskOptionGen('SELECT','EDIT', arrayOption)
		taskOptionGen('NEW','EDIT', arrayOption)
		taskOptionGen('DELETE','EDIT', arrayOption)
		taskOptionGen('PTO-R','PTO', arrayOption)
		taskOptionGen('PTO-A','PTO', arrayOption)
		taskOptionGen('PTO-X','PTO', arrayOption)
		taskOptionGen('SWIT-R','PTO', arrayOption)
		taskOptionGen('SWIT-A','PTO', arrayOption)
		taskOptionGen('SWIT-X','PTO', arrayOption)
		taskOptionGen('AVBL','GENERAL', arrayOption)
		

		var i = 0
		function taskOptionLoop(arr){
			$.getJSON('/taskOptionDefault',{
			taskOption:arr[i].name,
			taskCategory:arr[i].category
			}).done(function(pData){
				i++
				i < arr.length?taskOptionLoop(arr):''
			})
		}
		taskOptionLoop(arrayOption)


		$.getJSON('/taskOption').done(function(Rdata){
			console.log(Rdata)
			//- var curUserTitle = Rdata.curUserTitle;
			//- var ul = document.createElement('ul');
			//- ul.id = Rdata.taskOption.category + 'ListOp'
			//- ul.setAttribute('role', 'menu')
			//- ul.className = 'nav navbar-nav'
			var div = document.createElement('div')
			div.id = 'taskOptionInput'
			div.className = "col-sm-12"
			//- div.style.width= '1000px'

				

				//- var inputAddOp = document.createElement('input');
				//- inputAddOp.className = "col-sm-3 col-sm-offset-1"

				//- inputAddOp.setAttribute('placeholder','Add Option');
				//- inputAddOp.setAttribute('type','text');
				//- inputAddOp.setAttribute('id','taskOption');
				//- div.appendChild(inputAddOp)

				//- var inputAddOpCate = document.createElement('input');
				//- inputAddOpCate.className = "col-sm-3 col-sm-offset-1"

				//- inputAddOpCate.setAttribute('placeholder','Add Category');
				//- inputAddOpCate.setAttribute('type','text');
				//- inputAddOpCate.setAttribute('id','taskCategory');
				//- div.appendChild(inputAddOpCate)


			$('#taskOptionDiv').append(div)

			var div1 = document.createElement('div')
			div1.id = 'taskOptionUL'
			div1.className = "col-sm-12"
			$('#taskOptionDiv').prepend(div1)

			var arrCate = {}
			$.each(Rdata.taskOption, function (i, taskOption){
				console.log(taskOption)
				if(arrCate[taskOption.category]!= undefined ){
						arrCate[taskOption.category].push(taskOption.description)
				}else{
					arrCate[taskOption.category] = []
					arrCate[taskOption.category].push(taskOption.description)
				}
			})

			var taskOpListLength = 10
			console.log(arrCate)
			console.log(Object.keys(arrCate).length)
			if (Object.keys(arrCate).length > 5){
				var colNumber = 1
			}else{
				var colNumber = 2
			}
			
			for(key in arrCate){

				if(arrCate[key].length<taskOpListLength){
					var ul = document.createElement('ul')
					ul.setAttribute('role', 'menu')
					ul.className = 'col-sm-'+ colNumber
						li = document.createElement('li')
						li.style.color = 'blue'
						li.style.textDecoration= 'underline'
						li.style.width = '200px'
						li.style.listStyle = 'none'
						li.style.fontWeight = 'bold'
						li.appendChild(document.createTextNode(key))
						ul.appendChild(li)

					arrCate[key].forEach(function(val){
						taskOptionFct(val, key, ul)
					})
					$('#taskOptionUL').append(ul)	

				}else{

					var nDiv = Math.ceil(arrCate[key].length/taskOpListLength)
					for(var i=1; i<=nDiv; i++){
						var ul = document.createElement('ul')
						ul.setAttribute('role', 'menu')
						ul.className = 'col-sm-'+ colNumber
							li = document.createElement('li')
							li.style.color = 'blue'
							li.style.textDecoration= 'underline'
							li.style.width = '200px'
							li.style.listStyle = 'none'
							li.style.fontWeight = 'bold'
							li.appendChild(document.createTextNode(key))
							ul.appendChild(li)

							var j = i*taskOpListLength
							for(x=j-taskOpListLength;x<j;x++){
								taskOptionFct(arrCate[key][x], key , ul)
							}
							$('#taskOptionUL').append(ul)
					}
				}
			}
			
			//- execute taskOption function with rData
			//- $.each(Rdata.taskOption, taskOptionFct);
			
			//- function to list taskOption from return data
			function taskOptionFct(taskOptionDes, category, ul){
				
				var curUser = Rdata.curUser;
				
				//- var ulOpList = document.getElementById(taskOption.category + 'ListOp')
				var li = document.createElement('li');
				li.style.color = 'blue'
				li.style.width = '200px'
				li.style.listStyle = 'none'
				

					var radio = document.createElement('input');
					radio.setAttribute('type','radio');
					radio.setAttribute('name','PTO');
					radio.setAttribute('value',taskOptionDes);
				
				if(taskOptionDes=='SELECT'){
					
					
					activeOptionText(taskOptionDes)
					radio.id = 'SELECT'
					radio.setAttribute('checked', 'checked')
					li.addEventListener('click', function(){
						$('#taskOption').length>0?$('#taskOption').remove():''
						activeOptionText(taskOptionDes)
						

					})
					li.appendChild(radio);
					li.appendChild(document.createTextNode(taskOptionDes));
				}else if(taskOptionDes=='NEW'){
					if(roleList('B').indexOf(curUser.role)!=-1){
						li.addEventListener('click', function(){
							activeOptionText(taskOptionDes)
							$('#taskOption').length>0?$('#taskOption').remove():''
							var taskOptionLI = document.createElement('li')
							taskOptionLI.style.color = 'blue'
							taskOptionLI.style.textDecoration= 'underline'
							taskOptionLI.style.width = '50px'
							taskOptionLI.style.listStyle = 'none'	
							

								var inputAddOp = document.createElement('input');

								inputAddOp.setAttribute('placeholder','Add Option');
								inputAddOp.setAttribute('type','text');
								inputAddOp.setAttribute('id','taskOption');
								inputAddOp.addEventListener('blur', function(){

									var inputAddOpCateLI = document.createElement('li')
									inputAddOpCateLI.style.color = 'blue'
									inputAddOpCateLI.style.textDecoration= 'underline'
									inputAddOpCateLI.style.width = '50px'
									inputAddOpCateLI.style.listStyle = 'none'

										var inputAddOpCate = document.createElement('input');

										inputAddOpCate.setAttribute('placeholder','Add Category');
										inputAddOpCate.setAttribute('type','text');
										inputAddOpCate.setAttribute('id','taskCategory');
										inputAddOpCate.addEventListener('blur', function(){
											var taskOptionData = $("#taskOption").val().toUpperCase();
											var taskCategoryData = $("#taskCategory").val().toUpperCase();
											if (taskOptionData!=''&& taskCategoryData!=''){
										 		 $.post('/taskOption',{
						                          taskOption:taskOptionData,
						                          taskCategory:taskCategoryData
						                        }).done(function(pData){
							                       	if (pData.created==1){
							                       		$('#taskOption').remove()
							                            $('#taskCategory').remove()

							                       		var ul = document.createElement('ul')
														ul.setAttribute('role', 'menu')
														ul.className = 'col-sm-2'
															li = document.createElement('li')
															li.style.color = 'blue'
															li.style.textDecoration= 'underline'
															li.style.width = '100px'
															li.style.listStyle = 'none'
															li.style.fontWeight = 'bold'
															li.appendChild(document.createTextNode('NEW'))
															ul.appendChild(li)
								                            
								                            var li = document.createElement('li');
															li.style.color = 'blue'
															li.style.width = '200px'
															li.style.listStyle = 'none'
															

																var radio = document.createElement('input');
																radio.setAttribute('type','radio');
																radio.setAttribute('name','PTO');
																radio.setAttribute('value',pData.taskOption.description);
															li.appendChild(radio);
															li.appendChild(document.createTextNode(pData.taskOption.description))
															ul.appendChild(li)

														$('#taskOptionUL').append(ul)
							                          
							                        }
						                        });
						                    }else{
						                    	$('#taskOption').remove()
					                            $('#taskCategory').remove()
						                    }
										})

									inputAddOpCateLI.appendChild(inputAddOpCate)
									ul.insertBefore(inputAddOpCateLI, li)
									inputAddOpCate.focus()
								})
							taskOptionLI.appendChild(inputAddOp)
							ul.insertBefore(taskOptionLI, li)
							inputAddOp.focus()
							//- div.appendChild(inputAddOp)
							
						})
					
						li.appendChild(radio);
						li.appendChild(document.createTextNode(taskOptionDes));
					}
				}else if(taskOptionDes=='DELETE'){
					li.addEventListener('click', function(){
						activeOptionText(taskOptionDes)
						$('#taskOption').hide()
						$('#memo').hide()
					})
					li.appendChild(radio);
					li.appendChild(document.createTextNode(taskOptionDes));
				}else if(['SWIT-R','PTO-R','SWIT-X','SWIT-A','AVBL'].indexOf(taskOptionDes)!=-1){
					li.addEventListener('click', function(){
						memoOptDiv("individual",taskOptionDes);
					})
					li.addEventListener('click', function(){
						activeOptionText(taskOptionDes)
						
						$('#memo').length?$('#memo').remove():''
						//- ul.appendChild(li)

						$('#taskOption').hide()
						//- $('#memo').show()
						//- $('#memo').val('')

					})
					li.appendChild(radio);
					li.appendChild(document.createTextNode(taskOptionDes));
				}else{
				
					if(roleList('B').indexOf(curUser.role)!=-1){
						li.addEventListener('click', function(){
							memoOptDiv("individual",taskOptionDes);
						})
						li.addEventListener('click', function(){
							activeOptionText(taskOptionDes)
							$('#taskOption').hide()
							$('#memo').length?$('#memo').remove():''
						})
						li.appendChild(radio);
						li.appendChild(document.createTextNode(taskOptionDes));
					}
				}
				//- radio.setAttribute('checked','checked');
				

				//- click on list item to bring up the 'x'
				li.addEventListener('click',function(){
					if (li.childNodes.length >2){
							li.removeChild(li.childNodes[2])
						}

					var span = document.createElement('span')
					span.innerHTML = '';
					span.style.color = 'red'
					span.className = "glyphicon glyphicon-remove-circle"
					span.id = 'delGly';
					//- click the 'x' to remove from list
					span.addEventListener('click', function(){

						$.post('/delTaskOption',{taskOption:taskOptionDes}).done(function(pData){
							ul.removeChild(li)
						});
						
					});
					li.appendChild(span)
				});
				//- the 'x' disapear on mouseleave
				li.addEventListener('mouseleave',function(){
					if ($('#delGly').length>0){
						li.removeChild(document.getElementById('delGly'))
					}
				})
				li.addEventListener('click',function(){
				radio.checked = 'checked'
				})
				taskOptionDes!=undefined?ul.appendChild(li):''
			}
		});

		

		function memoOptDiv(optFilter, description){
			$.post('/memoOpt',{
				optFilter:optFilter,
				description:description
			}).done(function(Rdata){
				console.log(Rdata)
				
				var ul = document.createElement('ul')
				ul.setAttribute('role', 'menu')
				ul.id = "ulCheckedMemo"
				ul.className = 'col-sm-12'

				Rdata.taskOptMemos.forEach(function(taskOptMemo){
					var li = document.createElement('li')
					//- li.style.color = 'blue'
					//- li.style.textDecoration= 'underline'
					li.style.width = '1000px'
					li.style.listStyle = 'none'
					//- li.style.fontWeight = 'bold'
					
						var input = document.createElement('input')
						input.type = 'checkbox'
						input.name = taskOptMemo.type
						input.checked = taskOptMemo.checked|| false
						input.checked == true?input.className = "checkedMemo":""
						
						input.value = taskOptMemo.memo

						input.addEventListener('click', function(){

							var checkValue = 0
							input.checked == false?checkValue=false:checkValue=true
							console.log(checkValue)
							//Memorize which memo being check
							$.post('/checkedMemoUpd',{
								checkedMemoValue:checkValue,
								checkedMemoId:taskOptMemo.id
							}).done(function(Rdata){
								console.log(Rdata)
							})
							input.className = "checkedMemo"
							if(input.checked == true){
								//- if(taskOptMemo.type==="TASK"){
									var nestedOl = document.createElement('ol')
									nestedOl.setAttribute('role', 'menu')
									nestedOl.id = "nestedOlCheckedTask"
									//- nestedOl.className = 'col-sm-8'

										if (taskOptMemo.type==="TASK"){
											//- $('#memoChbxDetail').length>0?$('#memoChbxDetail').remove():""
											var inputDetail = document.createElement('input')
											inputDetail.type = 'text'
											inputDetail.id = 'memoChbxDetail'
											inputDetail.className = 'typeahead'
											inputDetail.placeholder = 'Add Memo Detail'
											//- console.log(description)
											inputDetail.addEventListener('blur', function(){
												console.log(inputDetail.value+'-'+taskOptMemo.id)
												//- if ($('#memoChbxDetail').val().length>0){
													$.post('/memoChbxDetailCreate',{
													memoChbxDetail:inputDetail.value,
													taskOptMemoId:taskOptMemo.id
													}).done(function(pData){
														console.log(JSON.stringify(pData, null, 4))
														inputDetail.value= ""
														var li = document.createElement('li')
														li.style.width = '600px'
														
														li.appendChild(document.createTextNode(pData.memoChbxDetail.taskDescription))
														nestedOl.appendChild(li)
													});
												//- }
												
											})
											nestedOl.appendChild(inputDetail)
										}


									taskOptMemo.taskOptDetails.forEach(function(taskOptDetail){
										var li = document.createElement('li')
										//- li.style.color = 'blue'
										//- li.style.textDecoration= 'underline'
										
										//- li.style.listStyle = 'none'
										li.appendChild(document.createTextNode(taskOptDetail.taskDescription))
										li.addEventListener('dblclick', function(){
											$.post('/memoChbxDetailDel',{
												memoChbxDetailId:taskOptDetail.id
											}).done(function(Rdata){
												nestedOl.removeChild(li)
											})

										})
									
										nestedOl.appendChild(li)
									})
									li.appendChild(nestedOl)
									//- inputDetail.focus()
								//- }
							}else{
								console.log(li)
								for(var i = 2; i < li.childNodes.length; i++){

									if(li.childNodes[i].nodeName!="SPAN"){
								    	li.removeChild(li.childNodes[i]);
									}
								    //- li.removeChild(li.childNodes[3]);
								}
								


							}

						})
					li.appendChild(input)
					li.appendChild(document.createTextNode(taskOptMemo.memo+'--'+ taskOptMemo.type))

					//Load memo detail when FIRST click on the taskoption
					if (input.checked == true){
						var nestedOl = document.createElement('ol')
						nestedOl.setAttribute('role', 'menu')
						nestedOl.id = "nestedOlCheckedTask"
						//- nestedOl.className = 'col-sm-8'


							//- $('#memoChbxDetail').length>0?$('#memoChbxDetail').remove():""
							if (taskOptMemo.type==="TASK"){
								var inputDetail = document.createElement('input')
								inputDetail.type = 'text'
								inputDetail.id = 'memoChbxDetail'
								inputDetail.className = 'typeahead'
								inputDetail.placeholder = 'Add Memo Detail'
								inputDetail.addEventListener('blur', function(){
									console.log(inputDetail.value+'-'+taskOptMemo.id)
										$.post('/memoChbxDetailCreate',{
										memoChbxDetail:inputDetail.value,
										taskOptMemoId:taskOptMemo.id
										}).done(function(pData){
											console.log(JSON.stringify(pData, null, 4))
											inputDetail.value= ""
											var li = document.createElement('li')
											li.style.width = '600px'

											li.appendChild(document.createTextNode(pData.memoChbxDetail.taskDescription))
											nestedOl.appendChild(li)
										});
									
								})
								nestedOl.appendChild(inputDetail)

							}

						


						taskOptMemo.taskOptDetails.forEach(function(taskOptDetail){
							var li = document.createElement('li')
							//- li.style.color = 'blue'
							//- li.style.textDecoration= 'underline'
							
							//- li.style.listStyle = 'none'
							li.appendChild(document.createTextNode(taskOptDetail.taskDescription))
							li.addEventListener('dblclick', function(){
								$.post('/memoChbxDetailDel',{
									memoChbxDetailId:taskOptDetail.id
								}).done(function(Rdata){
									nestedOl.removeChild(li)
								})

							})
						
							nestedOl.appendChild(li)
						})
					li.appendChild(nestedOl)
						//- inputDetail.focus()
					}

					li.addEventListener('click', function(){

						//- if (li.childNodes.length >2){
						//- li.removeChild(li.childNodes[2])
						//- }
						var span = document.createElement('span')
						span.innerHTML = '';
						span.style.color = 'red'
						span.className = "glyphicon glyphicon-remove-circle"
						span.id = 'delGly';
						//- click the 'x' to remove from list
						span.addEventListener('click', function(){
							$.post('/checkedMemoDel',{
								checkedMemoId:taskOptMemo.id
							}).done(function(Rdata){
								ul.removeChild(li)
							})
							
						});
						li.insertBefore(span, li.childNodes[2])
						li.addEventListener('mouseleave',function(){
							if ($('#delGly').length>0){
								li.removeChild(document.getElementById('delGly'))
							}
						})

						//- $('#nestedOlCheckedTask').length>0?$('#nestedOlCheckedTask').remove():""
						

						
						
					})
					
					ul.appendChild(li)


				})



				var select = document.createElement('select')
				select.id = 'selectType'
				select.className = "form-control"
				var arrType =['SELECT ONE', 'SCHEDULE','TASK']
				arrType.forEach(function(type){
					var option = document.createElement('option')
					option.value = type
					option.innerHTML = type
					select.appendChild(option)
				})
				select.addEventListener('change', function(){
					$('#memoChbx').length>0?$('#memoChbx').remove():''
					if(select.value!='SELECT ONE'){
						
						var input = document.createElement('input')
						input.type = 'text'
						input.id = 'memoChbx'
						input.className = 'typeahead'
						input.placeholder = 'Add Memo Checkbox'
						console.log(description)
						input.addEventListener('blur', function(){
							if ($('#memoChbx').val().length>0){
								$.post('/memoChbx',{
								memoChbx:$('#memoChbx').val(),
								taskOptionDes:description,
								type:select.value
								}).done(function(pData){
									console.log(JSON.stringify(pData, null, 4))
									var li = document.createElement('li')
									li.style.width = '300px'
									li.style.listStyle = 'none'

									li.appendChild(document.createTextNode(pData.taskOptionMemo.memo+ "-Added"))
									$('#memoChbx').val('')
									ul.appendChild(li)
							
								});
							}
							
						})
						ul.appendChild(input)
					}
					function taskOptionSearch (){
						$.post('/taskOptMemo',{
						type:select.value
						}).done(function(pData){
							var result = pData.taskOptMemos.map(function(taskOpt) {
								return taskOpt.memo;
								});
							// constructs the suggestion engine
							var taskOptMemos = new Bloodhound({
							  datumTokenizer: Bloodhound.tokenizers.whitespace,
							  queryTokenizer: Bloodhound.tokenizers.whitespace,
							  // `states` is an array of state names defined in "The Basics"
							  local: result
											
							});

							$('#memoChbx').typeahead({
							  hint: true,
							  highlight: true,
							  minLength: 1
							},
							{
							  name: 'states',
							  source: taskOptMemos
							});

							
						})

					}
					taskOptionSearch()
					
					
						
						
						
				})
						
				
				ul.appendChild(select)


					
					
				$('#taskOptMemoDiv').html(ul)


				
			})
		}




	

